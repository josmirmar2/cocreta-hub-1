name: Release Automation

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      packages: write
      pull-requests: write
      repository-projects: write
      security-events: write
      statuses: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Extract commit message
        id: extract_commit
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "COMMIT_MESSAGE=${COMMIT_MESSAGE}" >> $GITHUB_ENV
          
          if echo "${COMMIT_MESSAGE}" | grep -qE '^feat\('; then
            echo "RELEASE_TYPE=major" >> $GITHUB_ENV
          elif echo "${COMMIT_MESSAGE}" | grep -qE '^fix\('; then
            echo "RELEASE_TYPE=minor" >> $GITHUB_ENV
          elif echo "${COMMIT_MESSAGE}" | grep -qE '^refactor\('; then
            echo "RELEASE_TYPE=patch" >> $GITHUB_ENV
          elif echo "${COMMIT_MESSAGE}" | grep -qE '^test\('; then
            echo "RELEASE_TYPE=patch" >> $GITHUB_ENV
          else
            echo "RELEASE_TYPE=unknown" >> $GITHUB_ENV
            exit 1
          fi

      - name: Determine new version
        id: determine_version
        run: |
          MAJOR=0
          MINOR=0
          PATCH=0

          # Obtener la última versión
          if git describe --tags --abbrev=0; then
            LAST_VERSION=$(git describe --tags --abbrev=0)
            MAJOR=$(echo $LAST_VERSION | cut -d. -f1 | cut -dv -f2)
            MINOR=$(echo $LAST_VERSION | cut -d. -f2)
            PATCH=$(echo $LAST_VERSION | cut -d. -f3)
          fi

          case ${{ env.RELEASE_TYPE }} in
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
          esac

          NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV
          echo "Nueva versión: $NEW_VERSION"

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.NEW_VERSION }}
          release_name: "Release ${{ env.NEW_VERSION }}"
          body: "Automated release based on commit message."
          draft: false
          prerelease: false